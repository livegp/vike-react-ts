{"version":3,"file":"chunk-D6lHprcd.js","sources":["../../../../node_modules/vike/dist/esm/utils/unique.js","../../../../node_modules/vike/dist/esm/utils/PROJECT_VERSION.js","../../../../node_modules/vike/dist/esm/utils/projectInfo.js","../../../../node_modules/vike/dist/esm/utils/getGlobalObject.js","../../../../node_modules/@brillout/picocolors/picocolors.browser.mjs","../../../../node_modules/vike/dist/esm/utils/assertSingleInstance.js","../../../../node_modules/vike/dist/esm/utils/isNodeJS.js","../../../../node_modules/vike/dist/esm/utils/createErrorWithCleanStackTrace.js","../../../../node_modules/vike/dist/esm/utils/isObject.js","../../../../node_modules/vike/dist/esm/utils/assert.js","../../../../node_modules/vike/dist/esm/utils/humanizeTime.js","../../../../node_modules/vike/dist/esm/shared/hooks/executeHook.js"],"sourcesContent":["export { unique };\nfunction unique(arr) {\n    return Array.from(new Set(arr));\n}\n","// Automatically updated by @brillout/release-me\nexport const PROJECT_VERSION = '0.4.201';\n","import { PROJECT_VERSION } from './PROJECT_VERSION.js';\nexport const projectInfo = {\n    projectName: 'Vike',\n    projectVersion: PROJECT_VERSION\n};\n","export { getGlobalObject };\nexport { assertIsSingleModuleInstance };\nimport { assert } from './assert.js';\nimport { projectInfo } from './projectInfo.js';\nconst projectKey = `_${projectInfo.projectName.toLowerCase()}`;\n/** Share information across module instances. */\nfunction getGlobalObject(\n// We use the filename (or file path) as key. There should be only one getGlobalObject() usage per file. Thus the key should be unique, assuming the filename (or file path) is unique.\nkey, defaultValue) {\n    const globalObjects = getGlobalObjects();\n    const globalObject = (globalObjects[key] = globalObjects[key] || defaultValue);\n    return globalObject;\n}\n/** Assert that the module is instantiated only once. */\nfunction assertIsSingleModuleInstance(\n// We use the filename (or file path) as key.\nkey) {\n    const globalObjects = getGlobalObjects();\n    assert(!(key in globalObjects));\n}\nfunction getGlobalObjects() {\n    // @ts-ignore\n    const globalObjects = (globalThis[projectKey] = globalThis[projectKey] || {});\n    return globalObjects;\n}\n","export default new Proxy(\n  {},\n  {\n    get: (_, p) =>\n      (s) => {\n        if (p === 'code') return `\\`${s}\\``\n        if (p === 'string') return `'${s}'`\n        return s\n      }\n  }\n)\n","export { assertSingleInstance_onClientEntryServerRouting };\nexport { assertSingleInstance_onClientEntryClientRouting };\nexport { assertSingleInstance_onAssertModuleLoad };\n//  - Throw error if there are two different versions of vike loaded\n//  - Show warning if entry of Client Routing and entry of Server Routing are both loaded\n//  - Show warning if vike is loaded twice\nimport { unique } from './unique.js';\nimport { getGlobalObject } from './getGlobalObject.js';\nimport { projectInfo } from './projectInfo.js';\nimport pc from '@brillout/picocolors';\n/* Use original assertUsage() & assertWarning() after all CJS is removed from node_modules/vike/dist/\nimport { assertUsage, assertWarning } from './assert.js'\n*/\nconst globalObject = getGlobalObject('assertSingleInstance.ts', {\n    instances: [],\n    alreadyLogged: new Set()\n});\nconst clientRuntimesClonflict = 'Client runtime of both Server Routing and Client Routing loaded https://vike.dev/client-runtimes-conflict';\nconst clientNotSingleInstance = 'Client runtime loaded twice https://vike.dev/client-runtime-duplicated';\nfunction assertSingleInstance() {\n    {\n        const versions = unique(globalObject.instances);\n        assertUsage(versions.length <= 1, \n        // DO *NOT* patch vike to remove this error: because of multiple conflicting versions, you *will* eventually encounter insidious issues that hard to debug and potentially a security hazard, see for example https://github.com/vikejs/vike/issues/1108\n        `vike@${pc.bold(versions[0])} and vike@${pc.bold(versions[1])} loaded but only one version should be loaded`);\n    }\n    if (globalObject.checkSingleInstance && globalObject.instances.length > 1) {\n        /*/ Not sure whether circular dependency can cause problems? In principle not since client-side code is ESM.\n        console.warn(clientNotSingleInstance)\n        /*/\n        assertWarning(false, clientNotSingleInstance, { onlyOnce: true, showStackTrace: true });\n        //*/\n    }\n}\nfunction assertSingleInstance_onClientEntryServerRouting(isProduction) {\n    assertWarning(globalObject.isClientRouting !== true, clientRuntimesClonflict, {\n        onlyOnce: true,\n        showStackTrace: true\n    });\n    assertWarning(globalObject.isClientRouting === undefined, clientNotSingleInstance, {\n        onlyOnce: true,\n        showStackTrace: true\n    });\n    globalObject.isClientRouting = false;\n    if (isProduction)\n        globalObject.checkSingleInstance = true;\n    assertSingleInstance();\n}\nfunction assertSingleInstance_onClientEntryClientRouting(isProduction) {\n    assertWarning(globalObject.isClientRouting !== false, clientRuntimesClonflict, {\n        onlyOnce: true,\n        showStackTrace: true\n    });\n    assertWarning(globalObject.isClientRouting === undefined, clientNotSingleInstance, {\n        onlyOnce: true,\n        showStackTrace: true\n    });\n    globalObject.isClientRouting = true;\n    if (isProduction)\n        globalObject.checkSingleInstance = true;\n    assertSingleInstance();\n}\n// Called by utils/assert.ts which is (most certainly) loaded by all entries. That way we don't have to call a callback for every entry. (There are a lot of entries: `client/router/`, `client/`, `node/runtime/`, `node/plugin/`, `node/cli`.)\nfunction assertSingleInstance_onAssertModuleLoad() {\n    globalObject.instances.push(projectInfo.projectVersion);\n    assertSingleInstance();\n}\nfunction assertUsage(condition, errorMessage) {\n    if (condition) {\n        return;\n    }\n    const errMsg = `[vike][Wrong Usage] ${errorMessage}`;\n    throw new Error(errMsg);\n}\nfunction assertWarning(condition, errorMessage, { onlyOnce, showStackTrace }) {\n    if (condition) {\n        return;\n    }\n    const msg = `[vike][Warning] ${errorMessage}`;\n    if (onlyOnce) {\n        const { alreadyLogged } = globalObject;\n        const key = onlyOnce === true ? msg : onlyOnce;\n        if (alreadyLogged.has(key)) {\n            return;\n        }\n        else {\n            alreadyLogged.add(key);\n        }\n    }\n    if (showStackTrace) {\n        console.warn(new Error(msg));\n    }\n    else {\n        console.warn(msg);\n    }\n}\n","export function isNodeJS() {\n    if (typeof process === 'undefined')\n        return false;\n    if (!process.cwd)\n        return false;\n    // https://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js/35813135#35813135\n    if (!process.versions || typeof process.versions.node === 'undefined')\n        return false;\n    // https://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js/35813135#comment92529277_35813135\n    if (!process.release || process.release.name !== 'node')\n        return false;\n    return true;\n}\n","export { createErrorWithCleanStackTrace };\nimport { isNodeJS } from './isNodeJS.js';\nfunction createErrorWithCleanStackTrace(errorMessage, numberOfStackTraceLinesToRemove) {\n    const err = new Error(errorMessage);\n    if (isNodeJS()) {\n        err.stack = clean(err.stack, numberOfStackTraceLinesToRemove);\n    }\n    return err;\n}\nfunction clean(errStack, numberOfStackTraceLinesToRemove) {\n    if (!errStack) {\n        return errStack;\n    }\n    const stackLines = splitByLine(errStack);\n    let linesRemoved = 0;\n    const stackLine__cleaned = stackLines\n        .filter((line) => {\n        // Remove internal stack traces\n        if (line.includes(' (internal/') || line.includes(' (node:internal')) {\n            return false;\n        }\n        if (linesRemoved < numberOfStackTraceLinesToRemove && isStackTraceLine(line)) {\n            linesRemoved++;\n            return false;\n        }\n        return true;\n    })\n        .join('\\n');\n    return stackLine__cleaned;\n}\nfunction isStackTraceLine(line) {\n    return line.startsWith('    at ');\n}\nfunction splitByLine(str) {\n    // https://stackoverflow.com/questions/21895233/how-in-node-to-split-string-by-newline-n\n    return str.split(/\\r?\\n/);\n}\n","export function isObject(value) {\n    return typeof value === 'object' && value !== null;\n}\n","export { assert };\nexport { assertUsage };\nexport { assertWarning };\nexport { assertInfo };\nexport { getProjectError };\nexport { addOnBeforeLogHook };\nexport { getAssertErrMsg };\nexport { overwriteAssertProductionLogger };\nexport { isBug };\nexport { setAlwaysShowStackTrace };\nimport { assertSingleInstance_onAssertModuleLoad } from './assertSingleInstance.js';\nimport { createErrorWithCleanStackTrace } from './createErrorWithCleanStackTrace.js';\nimport { getGlobalObject } from './getGlobalObject.js';\nimport { isObject } from './isObject.js';\nimport { projectInfo } from './projectInfo.js';\nimport pc from '@brillout/picocolors';\nconst globalObject = getGlobalObject('utils/assert.ts', {\n    alreadyLogged: new Set(),\n    // Production logger. Overwritten by loggerNotProd.ts in non-production environments.\n    logger(msg, logType) {\n        if (logType === 'info') {\n            console.log(msg);\n        }\n        else {\n            console.warn(msg);\n        }\n    },\n    showStackTraceList: new WeakSet()\n});\nassertSingleInstance_onAssertModuleLoad();\nconst projectTag = `[vike]`;\nconst projectTagWithVersion = `[vike@${projectInfo.projectVersion}]`;\nconst numberOfStackTraceLinesToRemove = 2;\nfunction assert(condition, debugInfo) {\n    if (condition)\n        return;\n    const debugStr = (() => {\n        if (!debugInfo) {\n            return null;\n        }\n        const debugInfoSerialized = typeof debugInfo === 'string' ? debugInfo : JSON.stringify(debugInfo);\n        return pc.dim(`Debug info (for Vike maintainers; you can ignore this): ${debugInfoSerialized}`);\n    })();\n    const link = pc.blue('https://github.com/vikejs/vike/issues/new');\n    let errMsg = [\n        `You stumbled upon a Vike bug. Go to ${link} and copy-paste this error. A maintainer will fix the bug (usually under 24 hours).`,\n        debugStr\n    ]\n        .filter(Boolean)\n        .join(' ');\n    errMsg = addWhitespace(errMsg);\n    errMsg = addPrefixAssertType(errMsg, 'Bug');\n    errMsg = addPrefixProjctName(errMsg, true);\n    const internalError = createErrorWithCleanStackTrace(errMsg, numberOfStackTraceLinesToRemove);\n    globalObject.onBeforeLog?.();\n    throw internalError;\n}\nfunction assertUsage(condition, errMsg, { showStackTrace } = {}) {\n    if (condition)\n        return;\n    showStackTrace = showStackTrace || globalObject.alwaysShowStackTrace;\n    errMsg = addWhitespace(errMsg);\n    errMsg = addPrefixAssertType(errMsg, 'Wrong Usage');\n    errMsg = addPrefixProjctName(errMsg);\n    const usageError = createErrorWithCleanStackTrace(errMsg, numberOfStackTraceLinesToRemove);\n    if (showStackTrace) {\n        globalObject.showStackTraceList.add(usageError);\n    }\n    globalObject.onBeforeLog?.();\n    throw usageError;\n}\nfunction getProjectError(errMsg) {\n    errMsg = addWhitespace(errMsg);\n    errMsg = addPrefixAssertType(errMsg, 'Error');\n    errMsg = addPrefixProjctName(errMsg);\n    const projectError = createErrorWithCleanStackTrace(errMsg, numberOfStackTraceLinesToRemove);\n    return projectError;\n}\nfunction assertWarning(condition, msg, { onlyOnce, showStackTrace }) {\n    if (condition)\n        return;\n    showStackTrace = showStackTrace || globalObject.alwaysShowStackTrace;\n    msg = addWhitespace(msg);\n    msg = addPrefixAssertType(msg, 'Warning');\n    msg = addPrefixProjctName(msg);\n    if (onlyOnce) {\n        const { alreadyLogged } = globalObject;\n        const key = onlyOnce === true ? msg : onlyOnce;\n        if (alreadyLogged.has(key)) {\n            return;\n        }\n        else {\n            alreadyLogged.add(key);\n        }\n    }\n    globalObject.onBeforeLog?.();\n    if (showStackTrace) {\n        const err = createErrorWithCleanStackTrace(msg, numberOfStackTraceLinesToRemove);\n        globalObject.showStackTraceList.add(err);\n        globalObject.logger(err, 'warn');\n    }\n    else {\n        globalObject.logger(msg, 'warn');\n    }\n}\nfunction assertInfo(condition, msg, { onlyOnce }) {\n    if (condition) {\n        return;\n    }\n    msg = addWhitespace(msg);\n    msg = addPrefixProjctName(msg);\n    if (onlyOnce) {\n        const { alreadyLogged } = globalObject;\n        const key = msg;\n        if (alreadyLogged.has(key)) {\n            return;\n        }\n        else {\n            alreadyLogged.add(key);\n        }\n    }\n    globalObject.onBeforeLog?.();\n    globalObject.logger(msg, 'info');\n}\nfunction addOnBeforeLogHook(onBeforeLog) {\n    globalObject.onBeforeLog = onBeforeLog;\n}\nfunction addPrefixAssertType(msg, tag) {\n    let prefix = `[${tag}]`;\n    const color = tag === 'Warning' ? 'yellow' : 'red';\n    prefix = pc.bold(pc[color](prefix));\n    return `${prefix}${msg}`;\n}\nfunction addWhitespace(msg) {\n    if (msg.startsWith('[')) {\n        return msg;\n    }\n    else {\n        return ` ${msg}`;\n    }\n}\nfunction addPrefixProjctName(msg, showProjectVersion = false) {\n    const prefix = showProjectVersion ? projectTagWithVersion : projectTag;\n    return `${prefix}${msg}`;\n}\nfunction getAssertErrMsg(thing) {\n    let errMsg;\n    let errStack = null;\n    if (typeof thing === 'string') {\n        errMsg = thing;\n    }\n    else if (isObject(thing) && typeof thing.message === 'string' && typeof thing.stack === 'string') {\n        errMsg = thing.message;\n        errStack = thing.stack;\n    }\n    else {\n        return null;\n    }\n    let assertMsg;\n    let isBug;\n    if (errMsg.startsWith(projectTag)) {\n        assertMsg = errMsg.slice(projectTag.length);\n        isBug = false;\n    }\n    else if (errMsg.startsWith(projectTagWithVersion)) {\n        assertMsg = errMsg.slice(projectTagWithVersion.length);\n        isBug = true;\n    }\n    else {\n        return null;\n    }\n    // Append stack trace\n    if (errStack && (isBug || globalObject.showStackTraceList.has(thing))) {\n        assertMsg = `${assertMsg}\\n${removeErrMsg(errStack)}`;\n    }\n    const showVikeVersion = isBug;\n    return { assertMsg, showVikeVersion };\n}\nfunction removeErrMsg(stack) {\n    if (typeof stack !== 'string')\n        return String(stack);\n    const [firstLine, ...stackLines] = stack.split('\\n');\n    if (!firstLine.startsWith('Error: '))\n        return stack;\n    return stackLines.join('\\n');\n}\nfunction overwriteAssertProductionLogger(logger) {\n    globalObject.logger = logger;\n}\nfunction isBug(err) {\n    return !String(err).includes('[Bug]');\n}\nfunction setAlwaysShowStackTrace() {\n    globalObject.alwaysShowStackTrace = true;\n}\n","export { humanizeTime };\nfunction humanizeTime(milliseconds) {\n    const seconds = milliseconds / 1000;\n    if (seconds < 120) {\n        const n = round(seconds);\n        return `${n} second${plural(n)}`;\n    }\n    {\n        const minutes = seconds / 60;\n        const n = round(minutes);\n        return `${n} minute${plural(n)}`;\n    }\n}\nfunction round(n) {\n    let rounded = n.toFixed(1);\n    if (rounded.endsWith('.0'))\n        rounded = rounded.slice(0, -2);\n    return rounded;\n}\nfunction plural(n) {\n    return n === '1' ? '' : 's';\n}\n","export { executeHook };\nexport { getPageContext };\nexport { providePageContext };\nexport { isUserHookError };\nimport { getProjectError, assertWarning } from '../../utils/assert.js';\nimport { getGlobalObject } from '../../utils/getGlobalObject.js';\nimport { humanizeTime } from '../../utils/humanizeTime.js';\nimport { isObject } from '../../utils/isObject.js';\nconst globalObject = getGlobalObject('utils/executeHook.ts', {\n    userHookErrors: new WeakMap(),\n    pageContext: null\n});\nfunction isUserHookError(err) {\n    if (!isObject(err))\n        return false;\n    return globalObject.userHookErrors.get(err) ?? false;\n}\nfunction executeHook(hookFnCaller, hook, pageContext) {\n    const { hookName, hookFilePath, hookTimeout: { error: timeoutErr, warning: timeoutWarn } } = hook;\n    let resolve;\n    let reject;\n    const promise = new Promise((resolve_, reject_) => {\n        resolve = (ret) => {\n            clearTimeouts();\n            resolve_(ret);\n        };\n        reject = (err) => {\n            clearTimeouts();\n            reject_(err);\n        };\n    });\n    const clearTimeouts = () => {\n        if (currentTimeoutWarn)\n            clearTimeout(currentTimeoutWarn);\n        if (currentTimeoutErr)\n            clearTimeout(currentTimeoutErr);\n    };\n    const currentTimeoutWarn = isNotDisabled(timeoutWarn) &&\n        setTimeout(() => {\n            assertWarning(false, `The ${hookName}() hook defined by ${hookFilePath} is slow: it's taking more than ${humanizeTime(timeoutWarn)} (https://vike.dev/hooksTimeout)`, { onlyOnce: false });\n        }, timeoutWarn);\n    const currentTimeoutErr = isNotDisabled(timeoutErr) &&\n        setTimeout(() => {\n            const err = getProjectError(`The ${hookName}() hook defined by ${hookFilePath} timed out: it didn't finish after ${humanizeTime(timeoutErr)} (https://vike.dev/hooksTimeout)`);\n            reject(err);\n        }, timeoutErr);\n    (async () => {\n        try {\n            providePageContext(pageContext);\n            const ret = await hookFnCaller();\n            resolve(ret);\n        }\n        catch (err) {\n            if (isObject(err)) {\n                globalObject.userHookErrors.set(err, { hookName, hookFilePath });\n            }\n            reject(err);\n        }\n    })();\n    return promise;\n}\nfunction isNotDisabled(timeout) {\n    return !!timeout && timeout !== Infinity;\n}\n/**\n * Access `pageContext` object inside Vike hooks, in order to create universal hooks.\n *\n * https://vike.dev/getPageContext\n */\nfunction getPageContext() {\n    return globalObject.pageContext;\n}\n/**\n * Provide `pageContext` for universal hooks.\n *\n * https://vike.dev/getPageContext\n */\nfunction providePageContext(pageContext) {\n    globalObject.pageContext = pageContext;\n    // Promise.resolve() is quicker than process.nextTick() and setImmediate()\n    // https://stackoverflow.com/questions/67949576/process-nexttick-before-promise-resolve-then\n    Promise.resolve().then(() => {\n        globalObject.pageContext = null;\n    });\n}\n"],"names":["unique","arr","PROJECT_VERSION","projectInfo","projectKey","getGlobalObject","key","defaultValue","globalObjects","getGlobalObjects","pc","_","p","s","globalObject","clientRuntimesClonflict","clientNotSingleInstance","assertSingleInstance","versions","assertUsage","assertWarning","assertSingleInstance_onClientEntryClientRouting","isProduction","assertSingleInstance_onAssertModuleLoad","condition","errorMessage","errMsg","onlyOnce","showStackTrace","msg","alreadyLogged","isNodeJS","createErrorWithCleanStackTrace","numberOfStackTraceLinesToRemove","err","clean","errStack","stackLines","splitByLine","linesRemoved","line","isStackTraceLine","str","isObject","value","logType","projectTag","projectTagWithVersion","assert","debugInfo","_a","debugStr","debugInfoSerialized","addWhitespace","addPrefixAssertType","addPrefixProjctName","internalError","usageError","getProjectError","assertInfo","tag","prefix","color","showProjectVersion","humanizeTime","milliseconds","seconds","n","round","plural","minutes","rounded","executeHook","hookFnCaller","hook","pageContext","hookName","hookFilePath","timeoutErr","timeoutWarn","resolve","reject","promise","resolve_","reject_","ret","clearTimeouts","currentTimeoutWarn","currentTimeoutErr","isNotDisabled","providePageContext","timeout"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}